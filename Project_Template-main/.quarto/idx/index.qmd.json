{"title":"CASA00025 Group Project: Assessing the Impact of the Photovoltaic Heat Island Effect on Fish Farms in Southeastern Taiwan","markdown":{"headingText":"CASA00025 Group Project: Assessing the Impact of the Photovoltaic Heat Island Effect on Fish Farms in Southeastern Taiwan","containsRefs":false,"markdown":"\n## Project Summary \n\nIan I don’t think we are meant to have any text in this section!!\nOriginal:\nIn line with Net Zero 2050, the Taiwanese government has implemented an aquavoltaics (fishery–electricity symbiosis) policy in southeastern Taiwan since 2020. This initiative integrates solar panels into fish farms to generate renewable energy. However, concerns have arisen about potential environmental impacts, including the photovoltaic heat island (PVHI) effect. While some research suggests PVHI is minimal or even cooling in some areas (Xu et al., 2024), other studies report significant heat island effects of large solar power plants (Barron-Gafford et al., 2016). This project employs remote sensing (landset8?) and solar panel polygon data, using the XXX method, to assess PVHI impacts and compare conditions before and after policy implementation.\n\n:::{.column-page style=\"text-align: center;\"}\n<iframe src='https://www.youtube.com/embed/nRabktbLZyA' width='80%' height='500px'></iframe>\n:::\n\n### Problem Statement \nWhat is the problem you’re trying to address using this application?\n\nPotential new paragraph? Needs cutting by 13 words\nAlthough renewable energy is crucial to meeting Taiwan’s Net Zero goals, land availability represents a critical constraint (Hsiao *et al.*, 2021). To address this, the Taiwanese government has implemented an aquavoltaics programme, integrating solar panels into fish farms to generate space-efficient energy. However, this initiative faces significant local opposition, with some authorities even banning construction due to concerns about socio-environmental impacts such as the photovoltaic heat island effect (PHVI). Academic assessments of PHVI find mixed results (Barron-Gafford et al., 2016; Xu et al., 2024). As such, there is a clear need for an accessible, evidence-based participatory planning tool to resolve local conflicts, overcome planning roadblocks, and provide a foundation for informed programme expansion.\n\nCerys’s version (96 words)\nAlthough renewable energy is crucial to meeting Taiwan’s Net Zero goals, land availability represents a critical constraint (Hsiao *et al.*, 2021). To address this, the Taiwanese government has implemented an aquavoltaics programme, integrating solar panels into fish farms to generate space-efficient energy. However, this initiative faces significant local opposition, with some authorities even banning construction due to concerns about socio-environmental impacts such as the photovoltaic heat island effect (PHVI). There is a clear need for an accessible, evidence-based participatory planning tool to resolve local conflicts, overcome planning roadblocks, and provide a foundation for informed programme expansion.\n\nIan’s original:\nThe main issue lies in the implementation of the aquavoltaics policy by Taiwan’s central government, which provides subsidies to fish farm landowners willing to install solar panels. However, from the perspective of local governments, the excessive installation of solar panels may lead to environmental concerns. Local residents are also worried about the potential heat island effect. Therefore, this project aims to assess the impact of solar panels on temperature through remote sensing analysis, and to develop a visual tool that allows both government authorities and local communities to better understand the environmental effects after solar panel installation.\n\n### End User \nWho are you building this application for? How does it address a need this community has?\n\nIan’s original:\nThis application is being developed for two key groups: local communities in southeastern Taiwan, particularly fish farm landowners and residents, and government authorities involved in the planning and oversight of aquavoltaics projects. Currently, there is a lack of accessible tools for understanding how solar installations affect local microclimates.\n\nPotential alternative? Needs cutting by 4 words\nThis application serves as a participatory planning tool to overcome conflicts between stakeholders with opposing perspectives on aquavoltaic expansion. It answers the question: What are the PHVI impacts of past solar farms, and what would the impact be in prospective future sites? Alongside expediting planning, helping mitigate local impacts, and supporting Taiwan’s Net Zero goals, additional benefits for each stakeholder are outlined below:\n\n- **National government:** communicating policy; mitigating unfounded concerns.\n- **Local government:** evidence-based assessment of past projects; informed future planning within jurisdictions.\n- **Fish farmers:** presenting a case for having solar panels installed on their sites.\n- **Local residents:** reducing concerns; empowering them to challenge decisions at higher governance levels.\n\nCerys’s version (99 words)\nThis application serves as a participatory planning tool to overcome conflicts between stakeholders with opposing perspectives on aquavoltaic expansion. It seeks to explore the PHVI impacts of past and prospective solar farms sites. Alongside expediting planning, helping mitigate local impacts, and supporting Taiwan’s Net Zero goals, additional benefits for each stakeholder are outlined below:\n\n- **National government:** communicating policy; mitigating unfounded concerns.\n- **Local government:** evidence-based assessment of past projects; informed future planning within jurisdictions.\n- **Fish farmers:** presenting a case for having solar panels installed on their sites.\n- **Local residents:** reducing concerns; empowering them to challenge decisions at higher governance levels.\n\n\n### Data\nWhat data are you using?\n1. Landsat 8 OLI_TIRS imagery at X resolution for temperature change assessments.\n2. Sentinel-2 imagery at 10m resolution for fish farm identification.\n3. Solar panel polygons and construction dates from the [Taiwanese Civil Service.](https://github.com/kiang/moeaea.gov.tw). \n4. Population estimates at 30m resolution from [Meta’s Data for Good](https://dataforgood.facebook.com/dfg/tools/high-resolution-population-density-maps)\n5. Digital elevation data at 30m resolution from the [NASA Shuttle Radar Topography Mission.](https://developers.google.com/earth-engine/datasets/catalog/USGS_SRTMGL1_003)\n\n\n### Methodology\nHow are you using this data to address the problem?\n\nThe application first assesses the PHVI impacts of past solar panel sites before predicting implications of future developments. First, land surface temperature (LST) before and after solar panel installation is calculated using the method detailed by Xu *et al.,* (2024), which XXX. A random forest model uses these changes, alongside optical and thermal imagery, slope, and elevation to predict temperature impacts at other sites. A second random forest identifies fish farms, ensuring users can only select prospective sites which could be included in the programme. Finally, predicted temperature change and local population estimates indicate the impact of developments on local communities.\n\n### Interface\nJess:\nThe application provides a transparent, accessible tool to reduce silofication, overcome debate, and bring clarity to a contentious issue. The interface is divided into two: the Explore tab provides a broad overview of PHVI impacts through summary statistics and charts, while the Predict tab enables site-specific predictions, allowing users to tailor insights to their local context. Users can click on solar farms to receive a summary at any point, either supplementing the overview or facilitating comparisons with prospective sites. A blue-to-red colour scheme intuitively communicates temperature changes, and clear chart titles and disclaimers ensure the analysis is understandable to lay users.\n\nIan’s\nOur interface focuses on two main goals:\nSimplicity and Intuitive Use – Users can easily explore how existing solar panels impact local temperatures through clear charts, colour-coded maps, and clickable summaries. The Explore tab provides an accessible overview, ensuring even non-experts can quickly understand key insights.\n\n\nSupporting Future Planning and Stakeholder Discussion—The Predict tab enables users to model the temperature impacts of proposed solar farms, helping diverse stakeholders make informed, collaborative decisions. The tool reduces silicification and brings clarity to a complex, often contentious issue.\n\n\n## The Application \n\nReplace the link below with the link to your application.\n\n:::{.column-page}\n\n<iframe src='https://ollielballinger.users.earthengine.app/view/turkey-earthquake' width='100%' height='700px'></iframe>\n\n:::\n\n\n## How it Works \n\nUse this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\n\n### Analysis\n\n#### Data Processing\n\nJin to add temperature change stuff! Please also mention that we keep NDVI, NBDI, and optical/thermal bands (excluding B8 and B9) for the random forest. Please keep it short - 50ish words maybe?\n\nGiven local government and resident concerns about PHVI’s impact on surrounding communities, we define a function called popBuffer to sum estimated populations within 730 metres of solar farms: a distance typically affected by PHVI (Guoqing *et al.,* 2021).\n\n```js\n//Load population from Data For Good\nvar HRSL_total = ee.ImageCollection('projects/sat-io/open-datasets/hrsl/hrslpop').filterBounds(taiwan).median();\n\n//Vulnerable population: sum of 0-5 and 60+\nvar HRSL_0_5 = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_children_under_five\").filterBounds(taiwan).median();\nvar HRSL_60plus = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_elderly_over_sixty\").filterBounds(taiwan).median();\nvar HRSL_vulnerable = HRSL_0_5.add(HRSL_60plus).rename('HRSL_vulnerable');\n\n//Calculate population within 730m buffer\nfunction popBuffer(panel) {\n  var geom = panel.geometry().buffer(730);\n  var totalPop = ee.Number(HRSL_total.reduceRegion({reducer: ee.Reducer.sum(), geometry: geom, scale: 30, maxPixels: 1e13}).get('b1')).round();\n  var vulnerablePop = ee.Number(HRSL_vulnerable.reduceRegion({reducer: ee.Reducer.sum(), geometry: geom, scale: 30, maxPixels: 1e13}).get('HRSL_vulnerable')).round();\n  return panel.set({'total_buffer_pop': totalPop, 'vulnerable_buffer_pop': vulnerablePop});\n}\nvar all_results = results.map(popBuffer);\n```\n\nFinally, due to their impact on LST (Šafanda, 1999), we load slope and elevation data and reduce these to the means for each solar polygon. We also calculate polygon areas in hectares squared.\n\n```js\n//Add extra non-Landsat features: elevation, topography, and polygon area\nvar srtm = ee.Image('USGS/SRTMGL1_003').clip(taiwan);\nvar elevation = srtm.select('elevation');\nvar slope = ee.Terrain.slope(srtm);\n\nvar allFeatures = validFeatures.map(function(feature) {\n  var geom = feature.geometry();\n  var meanElevation = elevation.reduceRegion({reducer: ee.Reducer.mean(), geometry: geom, scale: 30, maxPixels: 1e13}).get('elevation');\n  var meanSlope = slope.reduceRegion({reducer: ee.Reducer.mean(), geometry: geom, scale: 30, maxPixels: 1e13}).get('slope');\n  var area = geom.area().divide(10000); //converting to ha^2 as metres were overwhelming the model\n  return feature.set({\n    'elevation': meanElevation,\n    'slope': meanSlope,\n    'area': area});\n});\n```\n\n#### Modelling\n\nAfter filtering all polygons to ensure they contain the necessary data, variables were extracted to conduct principal component analysis in Python to reduce dimensionality and prevent multicollinearity. The resultant random forest model is trained on 70% of the polygons, and has an R^2 of 0.79. It has a low RMSE and MAE relative to the average temperature change, making it suitable for predicting changes in new sites.\n\n```js\n//Extract training data\nvar bands = test.select(['mean_preLST', 'mean_postLST', 'mean_LST_diff', 'NDVI', 'NDBI', 'FV', 'EM', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B10', 'B11', 'elevation', 'slope', 'area'])\n  .randomColumn();\n\n//Define test-train split\nvar split=0.7\nvar training_sample = bands.filter(ee.Filter.lt('random', split));\nvar validation_sample = bands.filter(ee.Filter.gte('random', split));\n\nprint('Sample training feature:', training_sample.first())\n\n//Set up RF\nvar model = ee.Classifier.smileRandomForest(100)\n  .setOutputMode('REGRESSION')\n  .train({\n    features: training_sample,\n    classProperty: 'mean_postLST',\n    //removed mean_preLST, EM, FV due to multicollinearity\n    inputProperties: ['NDVI', 'NDBI', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B10', 'B11', 'elevation', 'slope', 'area']});\n```\n\nCerys to add brief description of method and code\n\n118 words (lmk if it needs cutting)\nImportantly, if users are to select potential sites for aquavoltaic programme expansion, it is imperative that these are actually fish farms. We used a Random Forest model to identify existing fish farms based on Sentinel-2 imagery. The analysis draws from Ballinger’s (2024) informal oil refinery identification application. The model is trained and tested on manually drawn land identification polygons. The resulting prediction data was then exported and uploaded to QGIS where it was manually cleaned. In the prediction tab of the final application, the user’s polygon selection is required to intersect with the fish farm polygons. While the model is not perfectly accurate, it is sufficient in its goal of limiting user input to areas with fish farms.\n\n```js\n\n// pre-process imagery\nvar start='2021-04-14';\nvar end='2025-04-14';\nvar bands = ['B2', 'B3', 'B4','B5','B6','B7','B8', 'B8A','B11','B12'];\n\nvar sentinel = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')\n                  .filter(ee.Filter.date(start, end))\n                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))\n                  .mean()\n                  .select(bands);\n                \nvar s_rgb = {\n  min: 0.0,\n  max: 3000,\n  bands:['B4', 'B3', 'B2'],\n  opacity:1\n};\n\nvar sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')\n  .filterBounds(AOI)\n  .filterDate(start, end)\n  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n  .select('VV')\n  .mean();\n\nvar ndvi=sentinel.normalizedDifference(['B8','B4']).select(['nd'],['ndvi']);\n\nvar ndwi=sentinel.normalizedDifference(['B3','B8']).select(['nd'],['ndwi'])\n\nvar newBands = ee.Image([ndwi,ndvi,sentinel1.rename('S1_VV')]);\n\nvar image=sentinel.addBands(newBands).clip(AOI);\n\n// add AOI and satellite imagery to map\nMap.addLayer(image.clip(AOI), s_rgb, 'Sentinel');\nMap.addLayer(AOI,null,\"AOI\",false);\n\n// select random points from each land type for training/validation\nvar fishfarm_points=ee.FeatureCollection.randomPoints(fishfarms, 3000).map(function(i){\n  return i.set({'class': 0})});\n  \nvar urban_points=ee.FeatureCollection.randomPoints(urban, 1000).map(function(i){\n  return i.set({'class': 1})});\n\n  \nvar river_points=ee.FeatureCollection.randomPoints(rivers, 2000).map(function(i){\n  return i.set({'class': 2})});  \n\nvar sample=ee.FeatureCollection([urban_points,\n                                  fishfarm_points,\n                                  river_points\n                                  ])\n                                  .flatten()\n                                  .randomColumn();\n\n// take samples from image for training and validation   \nvar split=0.7\nvar training_sample = sample.filter(ee.Filter.lt('random', split));\nvar validation_sample = sample.filter(ee.Filter.gte('random', split));\n\nvar training = image.sampleRegions({\n  collection: training_sample,\n  properties: ['class'],\n  scale: 10,\n});\n\nvar validation = image.sampleRegions({\n  collection: validation_sample,\n  properties: ['class'],\n  scale: 10\n});\n\n// create model and run to create predictions\nvar model = ee.Classifier.smileRandomForest(400)\n.train(training, 'class');\n\nvar prediction = image.classify(model);\n\nvar fishfarm_prediction=prediction.updateMask(prediction.eq(0));\n\nMap.addLayer(fishfarm_prediction,{palette:'red'},'Predicted Fish Farms');\n\n// Assess accuracy of model\nvar validated = validation.classify(model);\n\nvar testAccuracy = validated.errorMatrix('class', 'classification');\n\nprint('Confusion Matrix ', testAccuracy);\nprint('Validation overall accuracy: ', testAccuracy.accuracy())\n\n```\n\n### User Interface\n#### UI Structure\nThis code builds an interactive user interface (UI) in Google Earth Engine. It structures the app into two main parts: a Main Panel and a Map. The Main Panel includes two navigation buttons (to switch between exploring existing solar farms or predicting impacts for new sites), and a content container that updates to show either statistics cards, charts, and layer controls, or drawing tools for prediction.\n```js\n/*\nRoot\n├── Main Panel\n│   ├── Title\n│   ├── Button Panel\n│   │   ├── Visualize Button\n│   │   └── Predict Button\n│   └── Content Container\n│       ├── Visualize Content\n│       │   ├── Statistics Cards\n│       │   ├── Charts\n│       │   └── Layer Controls\n│       └── Predict Content\n│           ├── Drawing Tools\n│           └── Results Panel\n└── Map\n    ├── Base Layer\n    ├── Solar Panels Layer\n    ├── Fish Farms Layer\n    └── Population Layer\n*/\n\n// Clear UI and define core functions\nui.root.clear();\n\n// Initialize main UI components\nvar mainPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {width: '500px', padding: '10px'}\n});\n\nvar map = ui.Map();\nmap.setOptions('SATELLITE');\nmap.setCenter(120.10159388310306, 23.119258878572882, 13.5)\n\n//Add a legend\nvar legend = ui.Panel({style: {position: 'bottom-left', padding: '8px 15px'}});\nvar legendTitle = ui.Label({value: 'Temperature Difference (°C)', style: {fontWeight: 'bold', fontSize: '14px', margin: '0 0 4px 0'}});\nlegend.add(legendTitle);\n//Set visualisation parameters - same as polygons\nvar palette = palettes.colorbrewer.RdBu[9].reverse();\nvar min = -6;\nvar max = 6;\n//Set up colour bar\nvar colorBar = ui.Thumbnail({image: ee.Image.pixelLonLat().select(0).multiply((max - min) / 100.0).add(min)\n           .visualize({min: min, max: max, palette: palette}),\n  params: {bbox: [0, 0, 100, 10], dimensions: '100x10'},\n  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'}\n});\nlegend.add(colorBar);\n//Add labels\nvar legendLabels = ui.Panel({\n  layout: ui.Panel.Layout.flow('horizontal'),\n  style: {margin: '1px 0 0 0'}\n});\nlegendLabels.add(ui.Label(min.toString(), {fontSize: '12px'}));\nlegendLabels.add(ui.Label(' ', {stretch: 'horizontal'})); // Spacer\nlegendLabels.add(ui.Label(max.toString(), {fontSize: '12px'}));\nlegend.add(legendLabels);\nmap.add(legend);\n\n// Create UI panels and buttons\nmainPanel.add(ui.Panel({\n  widgets: [ui.Label('Tainan Solar Farm Heat Impact App', \n    {fontWeight: 'bold', fontSize: '22px', margin: '0 0 10px 0', padding: '6px'})],\n  style: {padding: '0'}\n}));\n\n// Content panels\nvar visualizeContent = ui.Panel({style: {border: '1px solid #999', padding: '8px'}});\nvar predictedContent = ui.Panel({\n  widgets: [ui.Label('Still working', {fontSize: '16px', padding: '20px'})],\n  style: {border: '1px solid #999', padding: '8px'}\n});\n\n// Navigation buttons\nvar buttons = {\n  visualize: ui.Button({\n    label: 'Explore Existing Solar Farms',\n    onClick: function() {\n      showPanel(visualizeContent, buttons.visualize, buttons.predict);\n    },\n    style: {padding: '4px', fontWeight: 'bold', \n            border: '1px solid #dddddd', margin: '0 2px 0 0'}\n  }),\n  predict: ui.Button({\n    label: 'Predict Change in a New Site',\n    onClick: function() {\n      showPanel(predictedContent, buttons.predict, buttons.visualize);\n    },\n    style: {padding: '4px', fontWeight: 'bold',\n            border: '1px solid #dddddd', margin: '0 2px 0 0'}\n  })\n};\n// Button panel and container\nvar buttonPanel = ui.Panel([buttons.visualize, buttons.predict], \n  ui.Panel.Layout.flow('horizontal'), {margin: '0 0 20px 0'});\nvar contentContainer = ui.Panel();\n```\n\n#### UI Visualisation Components\nThis code primarily implements a visualization interface for analyzing the impact of solar farms. The main features include: Layer Management — three visualization layers are set up: solar panels, fish ponds, and population estimates. The layerConfigs define display parameters and styles for each layer, while the createLayerControl function enables users to toggle layers on or off. Data Display — the interface shows the total number of solar farms and their installation dates, along with statistic cards and three charts: a histogram of temperature changes, a histogram of population distribution, and a scatter plot showing the relationship between temperature change and area size. Interactive Features — users can click on a solar farm on the map to view detailed information and use the layer control panel to customize the data they wish to display.\n\n```js\n//Set solar panel visualisation parameters\nvar solarStyle = {min: -6, max: 6, palette: palettes.colorbrewer.RdBu[9]}; //for some reason we don't reverse it bc we've already reversed the legend!\n\n//Reduce to image for faster loading\nvar solarImage = results.reduceToImage({properties: ['mean_LST_diff'], reducer: ee.Reducer.mean()}).rename('mean_LST_diff');\n\n//Add outlines so users can later select polygons\nvar outlinedPolygons = results.style({color: 'black', fillColor: '00000000', width: 0.5});\nMap.addLayer(outlinedPolygons, {}, 'Polygon Outlines');\n\n// define layerConfigs\nvar layerConfigs = {\n  'Solar Panels': {\n    layer: solarImage,\n    defaultVisible: true,\n    visParams: solarStyle,\n    type: 'raster'\n  },\n  \n  'Fish Farms': {\n    layer: fishfarms,\n    defaultVisible: false,\n    visParams: {\n      color: 'blue',\n      fillColor: '#87CEEB88',\n      width: 0\n    },\n    type: 'vector'\n  },\n  'Population Estimates': {\n    layer: HRSL_total, //.select('b1'),\n    defaultVisible: false,\n    visParams: {\n      min: 0,\n      max: 16,\n      palette: ['#A902A9'], //just a single colour, we don't want to complicate visualisation by having different pop colours too\n      opacity: 0.5},\n    type: 'raster'}\n};\n\n// define layer cache\nvar layerCache = {};\n\n// define layer order for UI display\nvar uiLayerOrder = [\n  'Solar Panels',\n  'Fish Farms',\n  'Population Estimates'\n];\n\n// define layer order for map display\nvar layerOrder = {\n  'Fish Farms': 1,\n  'Population Estimates': 2,\n  'Solar Panels': 3\n};\n\n//Add general instructions first\nvisualizeContent.add(ui.Label('Welcome!', {fontWeight:'bold', fontSize:'18px'}));\nvisualizeContent.add(ui.Label(\n  'This app uses satellite imagery to explore how solar farms influence local temperatures and communities.\\n\\n' +\n  'Use the map and this Explore tab to get a broad understanding of solar farm impacts. Click on a solar farm on the map to get more information about it. Finally, visit the Prediction tab to assess the potential effects of building a new solar farm in a location of your choice.',\n  {whiteSpace: 'pre-line'}\n));\n\n// add layer control to visualizeContent\nvisualizeContent.add(ui.Label('Select Data to Display:', {fontWeight: 'bold', fontSize: '16px', margin: '15px 0 5px 0'}));\nuiLayerOrder.forEach(function(layerName) {\n  visualizeContent.add(createLayerControl(layerName));\n});\n\n// add Summary Statistics panel\nvisualizeContent.add(ui.Label('Overview:', {fontWeight: 'bold', fontSize: '16px', margin: '15px 0 5px 0'}));\n\n//Add total polygon numbers\nvar totalPanelsLabel = ui.Label('Loading total polygons count...', {\n  fontSize: '14px',\n  color: 'gray'});\nvisualizeContent.add(totalPanelsLabel);\n\ntotalPanels.evaluate(function(count) { //replace when calculated\n  visualizeContent.remove(totalPanelsLabel);\n  var boldLabel = ui.Label(String(count), {\n    fontSize: '15px', fontWeight: 'bold', color: 'black', padding: '0', margin: '0 4px 0 0'});\n  var regularLabel = ui.Label(' solar farms installed since March 2019.', {\n    fontSize: '15px', color: 'black', padding: '0', margin: '0'});\n  //Use a panel to make sure they're added next to each other\n  var labelPanel = ui.Panel({\n    widgets: [boldLabel, regularLabel],\n    layout: ui.Panel.Layout.flow('horizontal'),\n    style: {padding: '0', margin: '4px'}});\n  visualizeContent.widgets().insert(7, labelPanel); //make sure it's added in same position as before - ChatGPT helped\n});\n\n//Add summary statistics\nvar statCardsPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('horizontal'),\n  style: {stretch: 'horizontal', margin: '10px 0'}\n});\n\n//Add a loading screen before the stats are calculated\nvar loadingCard = ui.Label('Loading maximum, minimum, and average temperature change...', {\n  fontSize: '14px',\n  color: 'gray',\n});\nstatCardsPanel.add(loadingCard);\n\nfunction createStatCard(label, value, color,textColor) {\n  return ui.Panel([\n    ui.Label(label, {\n      fontWeight: 'bold',\n      fontSize: '14px',\n      color: textColor,\n      backgroundColor: color\n    }),\n    ui.Label(value, {\n      fontSize: '18px',\n      color: textColor,\n      backgroundColor: color\n    })\n  ], ui.Panel.Layout.flow('vertical'), {\n    padding: '10px',\n    backgroundColor: color,\n    borderRadius: '8px',\n    margin: '4px',\n    width: '30%'\n  });\n}\n\n//Add Stat Cards in the order: min, max, average\nminTempChange.evaluate(function(min) {\n  statCardsPanel.clear(); //remove the loading bit\n  statCardsPanel.add(createStatCard('Min Temp Change', min.toFixed(2) + ' °C', '#2166ac','white'));\n  \n  averageTempChange.evaluate(function(avg) {\n    statCardsPanel.add(createStatCard('Avg Temp Change', avg.toFixed(2) + ' °C', '#f7f7f7','black'));\n\n    maxTempChange.evaluate(function(max) {\n      statCardsPanel.add(createStatCard('Max Temp Change', max.toFixed(2) + ' °C', '#b2182b','white'));\n    });\n  });\n});\nvisualizeContent.add(statCardsPanel);\n\n// add chart label and container\nvisualizeContent.add(ui.Label('Deeper Trends:', {fontWeight: 'bold', fontSize: '16px', margin: '15px 0 5px 0'}));\n\n// Create charts directly\nvar tempDistChart = ui.Chart.feature.histogram({\n  features: sample,\n  property: 'mean_LST_diff',\n  minBucketWidth: 0.1\n}).setOptions({\n  title: 'What is the distribution of temperature change?',\n  hAxis: {title: 'Temperature Change (°C)'},\n  vAxis: {title: 'Number of Solar Farms'},\n  legend: {position: 'none'},\n  colors: ['#FE8789']\n});\n\nvar popDistChart = ui.Chart.feature.histogram({\n  features: sample,\n  property: 'total_buffer_pop',\n  minBucketWidth: 50\n}).setOptions({\n  title: 'How many people typically live near a solar farm?',\n  hAxis: {title: 'Total Population Within 730m'},\n  vAxis: {title: 'Number of Solar Farms'},\n  legend: {position: 'none'},\n  colors: ['#A902A9']\n});\n\nvar nicerName = allFeatures.map(function(feature) { //improve appearance\n  return feature.set('Temperature Change (°C)', feature.get('mean_LST_diff'));\n});\n\nvar tempVsAreaChart = ui.Chart.feature.byFeature(\n  nicerName.filter(ee.Filter.notNull(['area', 'Temperature Change (°C)'])),\n  'area',\n  'Temperature Change (°C)'\n).setChartType('ScatterChart')\n .setOptions({\n   title: 'Is there a relationship between solar farm area and temperature?',\n   hAxis: {\n     title: 'Logged Area (hectares)',\n     scaleType: 'log',\n     format: 'short'\n   },\n   vAxis: {\n     title: 'Temperature Change (°C)',\n     viewWindow: {\n       min: -1,\n       max: 5\n     }\n   },\n   pointSize: 1,\n   colors: ['#ff8800'],\n   legend: {position: 'none'},\n   chartArea: {width: '85%', height: '80%'},\n   series: {0: {labelInLegend: 'Temp Change (°C)'}}\n });\n\n// Create a container for all charts\nvar chartsContainer = ui.Panel({\n  style: {margin: '10px 0'}\n});\n\n// Add charts to the container\nvisualizeContent.add(tempDistChart);\nvisualizeContent.add(popDistChart);\nvisualizeContent.add(tempVsAreaChart);\n\n\n//add disclaimer\nvisualizeContent.add(ui.Label(\n  'Please note that charts and summary statistics are based on a random sample of all solar farms. Although they closely reflect overall trends, exact values may vary slightly.',\n  {fontSize: '13px', fontStyle: 'italic'}));\n\n// then define createLayerControl function\nfunction createLayerControl(layerName) {\n  var config = layerConfigs[layerName];\n  \n  function createLayer() {\n    if (config.type === 'vector') {\n      return ui.Map.Layer({\n        eeObject: config.layer.style(config.visParams),\n        name: layerName,\n        shown: config.defaultVisible\n      });\n    }\n    return ui.Map.Layer({\n      eeObject: config.layer,\n      visParams: config.visParams,\n      name: layerName,\n      shown: config.defaultVisible\n    });\n  }\n\n  var checkbox = ui.Checkbox({\n    label: layerName,\n    value: config.defaultVisible,\n    onChange: function(checked) {\n      if (!layerCache[layerName]) {\n        layerCache[layerName] = createLayer();\n      }\n      \n      layerCache[layerName].setShown(checked);\n\n      // Add logic to link solar panel outlines (i.e. features) to the coloured panels (images) - ChatGPT helped here\n      if (layerName === 'Solar Panels') {\n        if (checked) {\n          layerCache['Polygon Outlines'] = ui.Map.Layer(outlinedPolygons, {}, 'Polygon Outlines');\n        } else {\n          layerCache['Polygon Outlines'] = null;\n        }\n      }\n\n      var visibleLayers = [];\n      // Sort layers by layerOrder\n      var sortedLayers = Object.keys(layerConfigs).sort(function(a, b) {\n        return layerOrder[a] - layerOrder[b];\n      });\n      \n      sortedLayers.forEach(function(name) {\n        if (layerCache[name] && layerCache[name].getShown()) {\n          visibleLayers.push(layerCache[name]);\n        }\n\n        //Again, ensure solar panel outlines are being shown if solar panels are\n        if (name === 'Solar Panels' && layerCache['Polygon Outlines']) {\n          visibleLayers.push(layerCache['Polygon Outlines']);\n        }\n      });\n\n      map.layers().reset(visibleLayers);\n    }\n  });\n\n  //Default load solar panel outlines, even though we don't want this to be shown in the UI\n  if (config.defaultVisible) {\n    layerCache[layerName] = createLayer();\n    map.add(layerCache[layerName]);\n\n    if (layerName === 'Solar Panels') {\n      layerCache['Polygon Outlines'] = ui.Map.Layer(outlinedPolygons, {}, 'Polygon Outlines');\n      map.add(layerCache['Polygon Outlines']);\n    }\n  }\n\n  return ui.Panel([checkbox], ui.Panel.Layout.flow('horizontal'));\n}\n\n// craete cache function\nvar chartCache = {\n  visualizeContent: null,\n  charts: []\n};\n\n// showPanel function\nfunction showPanel(panel, activeButton, inactiveButton) {\n  // hide all panels\n  visualizeContent.style().set('shown', false);\n  predictedContent.style().set('shown', false);\n  \n  // show the selected panel\n  if (panel === visualizeContent) {\n    visualizeContent.style().set('shown', true);\n    contentContainer.add(visualizeContent);\n  } else {\n    predictedContent.style().set('shown', true);\n    contentContainer.add(predictedContent);\n  }\n  \n  activeButton.style().set({fontWeight: 'bold'});\n  inactiveButton.style().set({fontWeight: 'bold'});\n}\n\n// Assemble UI and initialize\nmainPanel.add(buttonPanel);\nmainPanel.add(contentContainer);\n\n// Feature to click on solar farm polygons for more info:\nvar panel = null;\nvar highlightLayer = null;\n\n// Add map click handler\nmap.onClick(function(coords) {\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  \n  // remove existing panel/highlight\n  if (panel !== null) {\n    map.remove(panel);\n    panel = null;\n  }\n  \n  if (highlightLayer !== null) {\n    map.remove(highlightLayer);\n    highlightLayer = null;\n  }\n  \n  // create panel\n  panel = ui.Panel({\n    style: {\n      position: 'top-right',\n      padding: '8px',\n      width: '320px',\n      backgroundColor: 'rgba(25, 25, 25, 0.8)'\n    }\n  });\n  \n  //define button to close the pop-up\n  var closeButton = ui.Button({\n    label: 'Close Panel',\n    style: {margin: '4px', backgroundColor: '00000000'}, //color: 'white'},\n    onClick: function() {\n      map.remove(panel);\n      panel = null;\n      if (highlightLayer !== null) {\n        map.remove(highlightLayer);\n        highlightLayer = null;\n      }\n    }\n  });\n\n  // show initial loading panel so the user knows something's happening\n  panel.add(ui.Label('Solar Farm Summary:', {fontSize: '16px', fontWeight: 'bold', color: 'white', backgroundColor: '00000000'}))\n       .add(ui.Label('Calculating...', {color: 'white', backgroundColor: '00000000'}));\n\n  map.add(panel);\n  \n  // extract properties from all_results\n  var featureWithArea = all_results\n  .filterBounds(point)\n  .map(function(f) {\n    return f.set('area_hectare', f.geometry().area().divide(1e6));\n  })\n  .first();\n\n  featureWithArea.evaluate(function(feature) { \n    //in case the user didn't select a panel\n    if (!feature) {\n      panel.clear();\n      panel.add(ui.Label('There are no solar farms at this location. Please select a new site.', \n      {fontSize: '16px', color: 'white', backgroundColor: '00000000'}))\n      .add(closeButton);\n      return;\n    }\n\n    // draw outline of selected feature\n    var geom = ee.Feature(feature).geometry();\n    highlightLayer = ui.Map.Layer(geom, {color: 'yellow', fillColor: '00000000', width: 3}, 'Selected Area');\n    map.add(highlightLayer);\n    \n    //extract properties from all_results\n    var props = feature.properties;\n  \n    // Update panel with actual info\n    panel.clear();\n    panel.add(ui.Label('Solar Farm Summary:', {fontSize: '16px', fontWeight: 'bold', color: 'white', backgroundColor: '00000000'}))\n         .add(ui.Label('Installation date: ' + props.dateright, {color: 'white', backgroundColor: '00000000'}))\n         .add(ui.Label('Average temperature change: ' + props.mean_LST_diff.toFixed(2) + '°C', {color: 'white', backgroundColor: '00000000'}))\n         .add(ui.Label('Area: ' + props.area_hectare.toFixed(2) + ' hectares', {color: 'white', backgroundColor: '00000000'}))\n         .add(ui.Label('Potential population affected: ' + props.total_buffer_pop, {color: 'white', backgroundColor: '00000000'}))\n         .add(closeButton);\n  });\n});\n```\n#### UI Prediction Components\nThis section implements a prediction interface for analyzing the impact of solar farms on temperature and population. The main features include: Drawing Tools — users can draw a polygon on the map to select an area of interest. Prediction Processing — the model calculates temperature and population changes based on the selected area. Results Display — the interface shows the predicted temperature change, potential population affected, and a detailed summary of the results.\n\n```js\n// Initialize default view\nshowPanel(visualizeContent, buttons.visualize, buttons.predict);\n\n// Add to UI root\nui.root.add(ui.Panel([mainPanel, map], ui.Panel.Layout.flow('horizontal'), \n  {width: '100%', height: '100%'}));\n\n// clear the predictedContent\npredictedContent.clear();\n\n// add a description label\npredictedContent.add(ui.Label('To explore the effects of building a solar farm in a new site, please click the button below and draw a polygon on the map. Please make sure you draw the panel over a fish farm.', \n  {fontSize: '14px', margin: '0 0 10px 0'}));\n\n//Add button to draw the polygons\nvar drawButton = ui.Button({\n  label: 'Draw a new solar farm',\n  onClick: function() {\n    // clear the previous drawing\n    map.drawingTools().layers().reset();\n    map.drawingTools().setShape('polygon');\n    map.drawingTools().draw();\n    \n    // Disable the draw button and prevent further drawing\n    drawButton.setDisabled(true);\n    \n    // Start drawing and disable the drawing tools until drawing is complete\n    map.drawingTools().setShown(false);\n  },\n  style: {margin: '0 0 10px 0'}\n});\npredictedContent.add(drawButton);\n\n// add a results panel\nvar resultsPanel = ui.Panel({\n  style: {\n    margin: '10px 0',\n    padding: '5px',\n    border: '1px solid #ddd',\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    shown: false\n  }\n});\npredictedContent.add(resultsPanel);\n\n// add a loading label to the predictedContent\nvar loadingLabel = ui.Label('Please wait while the model runs...', {\n  fontStyle: 'italic',\n  fontSize: '15px',\n  //color: '#1a73e8',\n  margin: '10px 0',\n  shown: false\n});\npredictedContent.add(loadingLabel);\n\n// Create a small text label to appear under the results panel\nvar modelInfo = ui.Label('Please be aware that although the model is a useful tool, its predictions are unlikely to be perfectly accurate. The model explains 79% of variation in temperature change, with an average error of approximately 0.33°C.', {\n\n  shown:false\n});\npredictedContent.add(modelInfo);\n\n// Modify the map drawing completion event processing\nmap.drawingTools().onDraw(function(geometry) {\n  resultsPanel.clear();\n  loadingLabel.style().set('shown', true);  // show the loading label\n  modelInfo.style().set('shown', false); //ensure model explanation and results panel are hidden, even if they were shown before\n  resultsPanel.style().set('shown', false);\n  \n  //Only run if there is some intersection with fishfarms\n  var intersection = fishfarms.filterBounds(geometry).size().gt(0);\n  \n  intersection.evaluate(function(intersects) {\n    if (intersects) {\n\n    //Slightly changed version of the original analysis - does all calculations simultaneously to reduce waiting time\n      var computeScale = 30;\n      var feature = ee.Feature(geometry);\n      var pop = popBuffer(feature); //run pop function from above\n      var now = ee.Date(Date.now());\n      var polygonStart = now.advance(-3, 'year');\n      var polygonEnd = now;\n      var currentImage = ee.Image(getLST(geometry, polygonStart, polygonEnd)); //run LST calculation from above\n      var allComputations = ee.Dictionary({});\n\n      // perform the calculations separately and merge the results\n      var lstDict = currentImage.select('LST').reduceRegion({reducer: ee.Reducer.mean(), geometry: geometry, scale: computeScale, maxPixels: 1e13});\n      var indicesDict = currentImage.select(['NDVI', 'NDBI', 'FV', 'EM', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B10', 'B11']).reduceRegion({\n        reducer: ee.Reducer.mean(), geometry: geometry, scale: computeScale, maxPixels: 1e13});\n      var elevationDict = elevation.reduceRegion({reducer: ee.Reducer.mean(),geometry: geometry,scale: computeScale, maxPixels: 1e13});\n      var slopeDict = slope.reduceRegion({reducer: ee.Reducer.mean(), geometry: geometry, scale: computeScale, maxPixels: 1e13});\n\n      // Combine all the results\n      var combinedResults = ee.Dictionary(lstDict)\n        .combine(indicesDict)\n        .combine(elevationDict)\n        .combine(slopeDict)\n        .combine(pop.toDictionary(['total_buffer_pop', 'vulnerable_buffer_pop', 'child_buffer_pop', 'elderly_buffer_pop']));\n\n      combinedResults.evaluate(function(results) {\n        if (results.LST !== null) {\n          var currentLST = results.LST;\n          \n          //Create finished feature\n          var predictionFeature = ee.Feature(geometry, {\n            'NDVI': results.NDVI,\n            'NDBI': results.NDBI,\n            'B1': results.B1,\n            'B2': results.B2,\n            'B3': results.B3,\n            'B4': results.B4,\n            'B5': results.B5,\n            'B6': results.B6,\n            'B7': results.B7,\n            'B10': results.B10,\n            'B11': results.B11,\n            'elevation': results.elevation,\n            'slope': results.slope,\n            'area': geometry.area().divide(10000)});\n          \n          //Predict using model\n          var predicted = ee.FeatureCollection([predictionFeature]).classify(model);\n          predicted.first().get('classification').evaluate(function(futureTemp) {\n            var tempDiff = futureTemp - currentLST;\n            \n            //Hide loading label\n            loadingLabel.style().set('shown', false);\n            \n            //Print results\n            resultsPanel.style().set('shown', true);\n            resultsPanel.widgets().reset([ \n              ui.Label('Site Summary：', {fontWeight: 'bold', margin: '0 0 8px 0'}),\n              ui.Label('Current temperature：' + currentLST.toFixed(2) + '°C'),\n              ui.Label('Predicted temperature with solar farm：' + futureTemp.toFixed(2) + '°C'),\n              ui.Label('Predicted temperature change：' + tempDiff.toFixed(2) + '°C'),\n              ui.Label('Potential population affected：' + (results.total_buffer_pop || 0) + ' people'),\n              ui.Label('Potential vulnerable population affected：' + (results.vulnerable_buffer_pop || 0) + ' people'),\n              ui.Label('Populations are calculated within 730m of the polygon. Vulnerable population refers to estimated numbers of children (0-5) and elderly (60+) individuals living within this area.', {\n                  fontSize: '12px', fontStyle: 'italic'})\n            ]);\n            modelInfo.style().set('shown', true); \n            drawButton.setDisabled(false);\n            \n          });\n        } else {\n          loadingLabel.style().set('shown', false);\n          resultsPanel.style().set('shown', true);\n          resultsPanel.add(ui.Label('There is insufficient satellite imagery to calculate temperature for this location. Please select a different area.'));\n          drawButton.setDisabled(false);\n        }\n      });\n    } else {\n      loadingLabel.style().set('shown', false);\n      resultsPanel.style().set('shown', true);\n      resultsPanel.add(ui.Label('This polygon does not intersect with any fish farms. Please redraw in a different location.'));\n      drawButton.setDisabled(false);\n    }\n\n    //Stop and hide drawing tools once processing is finished\n    map.drawingTools().stop();\n    map.drawingTools().setShown(false);\n  });\n});\n```\n\n\n\n\n## References\nBallinger, O. (1 January 2024) Refinery Identification [Module content], Building Spatial Applications with Big Data CASA0025, University College London.\n\nBarron-Gafford, G., Minor, R., Allen, N., Cronin, A., Brooks, A., Pavao-Zuckerman, M. and Macknick, J., 2016. The Photovoltaic Heat Island Effect: Larger solar power plants increase local temperatures. Scientific Reports, 6, p.35070. [https://doi.org/10.1038/srep35070](https://doi.org/10.1038/srep35070)\n\nGuoqing, L., Hernandez, R.R., Blackburn, G.A., Davies, G., Hunt, M., Whyatt, J.D. and Armstrong, A., 2021. Ground-mounted photovoltaic solar parks promote land surface cool islands in arid ecosystems. Renewable and Sustainable Energy Transition, 1, p.100008.\n\nHsiao, Y.J., Chen, J.L. and Huang, C.T., 2021. What are the challenges and opportunities in implementing Taiwan's aquavoltaics policy? A roadmap for achieving symbiosis between small-scale aquaculture and photovoltaics. Energy Policy, 153, p.112264.\n\nŠafanda, J., 1999. Ground surface temperature as a function of slope angle and slope orientation and its effect on the subsurface temperature field. Tectonophysics, 306(3-4), pp.367-375.\n\nXu, Z., Li, Y., Qin, Y. and Bach, E., 2024. A global assessment of the effects of solar farms on albedo, vegetation, and land surface temperature using remote sensing. Solar Energy, 268, p.112198. [https://doi.org/10.1016/j.solener.2023.112198](https://doi.org/10.1016/j.solener.2023.112198)\n\n\n\n\n```js\nMap.setCenter(35.51898, 33.90153, 15);\n\nMap.setOptions(\"satellite\");\n\nvar aoi = ee.Geometry.Point(35.51898, 33.90153).buffer(3000);\n```\n\nYou can include images:\n\n![Pixelwise T-Test, 2018](images/beirut_change_2020.jpg)\n\nand math:\n$$ \\Large t = {\\frac{\\overline{x_1}-\\overline{x_2}} {\\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}}} $$\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"monokai.theme","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","book":{"title":"CASA0025 Final Assessment","author":"Group Name","date":"01/01/2024","chapters":["index.qmd"],"repo-actions":["edit"],"downloads":["pdf","epub"],"sharing":["twitter","facebook"],"favicon":"favicon.ico","sidebar":{"logo":"casa_logo.png"}},"theme":{"dark":"darkly","light":"cosmo"},"code-copy":true,"linkcolor":"#34a832"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}